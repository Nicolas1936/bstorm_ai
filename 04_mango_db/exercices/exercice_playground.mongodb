// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('resto');

db.restaurants.find()

//10. Write a MongoDB query to find the restaurants which 
//    locate in latitude value less than -95.754168
db.restaurants.find(
    {"address.coord.0" : {$lt : -95.754168}},
    {address : 1}
)

//11. Write a MongoDB query to find the restaurants 
//    that do not prepare any cuisine of 'American' 
//    and their grade score more than 70 and latitude less 
//    than -65.754168.
db.restaurants.find(
    {$and : 
        [
            {cuisine : {$ne : 'American '}},
            {"grades.score" : {$gt : 70}},
            {"address.coord.0" : {$lt : -65.754168}}
        ]
        
    },
    {cuisine : 1, "grades.score" : 1, "address.coord" : 1}
)

//12. Write a MongoDB query to find the restaurants which 
//    do not prepare any cuisine of 'American' and achieved a 
//    score more than 70 and located in the longitude 
//    less than -65.754168.
db.restaurants.find(
    {
        cuisine             : {$ne : 'American '},
        "grades.score"      : {$gt : 70},
        "address.coord.0"   : {$lt : -65.754168}
    },
    {cuisine : 1, "grades.score" : 1, "address.coord" : 1}
)

//13. Write a MongoDB query to find the restaurants which do 
//    not prepare any cuisine of 'American ' and achieved a 
//    grade point 'A' not belongs to the borough Brooklyn. 
//    
//    The document must be displayed according to the cuisine 
//    in descending order.
db.restaurants.find(
    {
        cuisine : {$ne : 'American '},
        "grades.grade" : 'A',
        borough : {$ne : 'Brooklyn'}
    },
    {cuisine : 1, "grades.grade" : 1, borough : 1}
).sort({cuisine : -1})

//14. Write a MongoDB query to find the restaurant Id, name, 
//    borough and cuisine for those restaurants which contain 
//    'Wil' as first three letters for its name. 
db.restaurants.find(
    {name : /^Wil/},
    {_id : 0, restaurant_id : 1, name : 1, borough : 1, cuisine : 1}
)

//15. Write a MongoDB query to find the restaurant Id, name, 
//    borough and cuisine for those restaurants which contain 
//    'ces' as last three letters for its name
db.restaurants.find(
    {name : /ces$/},
    {restaurant_id : 1, name : 1, borough : 1, cuisine : 1}
)

//16. Write a MongoDB query to find the restaurant Id, name, 
//    borough and cuisine for those restaurants which contain 
//    'Reg' as three letters somewhere in its name
db.restaurants.find(
    {name : /Reg/},
    {restaurant_id : 1, name : 1, borough : 1, cuisine : 1}
)

//17. Write a MongoDB query to find the restaurants which belong 
//    to the borough Bronx and prepared either American or 
//    Chinese dish.
db.restaurants.find(
    {$and :
        [
            {borough : 'Bronx'},
            {cuisine : {$in : ['American ', 'Chinese']}}
        ]  
    },
    {borough : 1, cuisine : 1}
)

//18. Write a MongoDB query to find the restaurant Id, name, 
//    borough and cuisine for those restaurants which belong to 
//    the borough Staten Island or Queens or Bronx or Brooklyn.
db.restaurants.find(
    {borough : {$in : ['Staten Island', 'Queens', 'Bronx', 'Brooklyn']}},
    {restaurant_id : 1, name : 1, borough : 1, cuisine : 1}
)

//19. Write a MongoDB query to find the restaurant Id, name, 
//    borough and cuisine for those restaurants which are not 
//    belonging to the borough Staten Island or Queens or Bronxor 
//    Brooklyn.
db.restaurants.find(
    {borough : {$nin : ['Staten Island', 'Queens', 'Bronx', 'Brooklyn']}},
    {restaurant_id : 1, name : 1, borough : 1, cuisine : 1}
)

//20. Write a MongoDB query to find the restaurant Id, name, 
//    borough and cuisine for those restaurants which achieved 
//    a score which is not more than 10.
db.restaurants.find(
    {"grades.score" : {$lte : 10}},
    {"grades.score" : 1, restaurant_id : 1, name : 1, borough : 1, cuisine : 1}
)

db.restaurants.find(
    {"grades.score" : { $not : {$gt : 10}}},
    {"grades.score" : 1,"restaurant_id" : 1, "name" : 1, "borough" : 1, "cuisine" : 1}
);

//21. Write a MongoDB query to find the restaurant Id, name, 
//    borough and cuisine for those restaurants which prepared 
//    dish except 'American' and 'Chinees' or restaurant's name 
//    begins with letter 'Wil'.
db.restaurants.find(
    {$or : 
        [
            {cuisine : {$nin : ['American ', 'Chinees']}},
            {name : /^Wil/}
        ]
    },
    {"restaurant_id" : 1, "cuisine" : 1, name : 1}
)

//22. Write a MongoDB query to find the restaurant Id, name, and 
//    grades for those restaurants which achieved a grade of "A" 
//    and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many 
//    of survey dates
db.restaurants.find(
    {
        "grades.grade" : 'A',
        "grades.score" : 11,
        "grades.date" : ISODate("2014-08-11T00:00:00Z")
    },
    {restaurant_id : 1, name : 1, grades : 1}
)

//TODO : 23, 24 ----------------------------------------------------

//25. Write a MongoDB query to arrange the name of the restaurants 
//    in ascending order along with all the columns.
db.restaurants.find().sort({name : 1})

//26. Write a MongoDB query to arrange the name of the restaurants 
//    in descending along with all the columns
db.restaurants.find().sort({name : -1})

//27. Write a MongoDB query to arranged the name of the cuisine 
//    in ascending order and for that same cuisine borough should be 
//    in descending order.
db.restaurants.find(
    {},
    {cuisine : 1, borough : 1}
).sort({cuisine : 1, borough : -1})

//28. Write a MongoDB query to know whether all the addresses 
//    contains the street or not.
db.restaurants.find(
    {"address.street" : {$exists : true}},
    {name : 1, "address.street" : 1}
)

